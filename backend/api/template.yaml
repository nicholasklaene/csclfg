AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: API For LFG app
Globals:
  Function:
    Timeout: 5
    Runtime: python3.9

Parameters:
  ENV:
    Type: String
    Description: Deployment enivronment
  UserPoolId:
    Type: String
    Description: User pool id for Cognito provider
  Audience:
    Type: String
    Description: Client id for user pool
  TableName:
    Type: String
    Description: Database for application
  AllowOrigins:
    Type: CommaDelimitedList
    Description: Origins to allow CORS from
  HostedZoneId:
    Type: String
    Description: Route 53 hosted zone id
    Default: Z07243391BMPB9ANDWTO0

Resources:
  CustomLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ./layer/
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        Authorizers:
          GeneralAuth:
            AuthorizationScopes:
              - email
              - openid
              - profile
            IdentitySource: "$request.header.Authorization"
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPoolId}
              audience:
                - !Ref Audience
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
        AllowOrigins: !Ref AllowOrigins

      Domain:
        DomainName: api.csclfg.com
        CertificateArn: arn:aws:acm:us-east-1:389606398544:certificate/f285b83c-cee7-4eff-baa3-127ec9e628f7
        Route53:
          HostedZoneId: !Ref HostedZoneId

  GetPostsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas
      Handler: get_posts.lambda_handler
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            Path: /posts
            Method: GET
            ApiId: !Ref HttpApi
      Environment:
        Variables:
          TABLE: !Ref TableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TableName
      Layers:
        - !Ref CustomLambdaLayer

  GetCategoriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas
      Handler: get_categories.lambda_handler
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            Path: /categories
            Method: GET
            ApiId: !Ref HttpApi
      Environment:
        Variables:
          TABLE: !Ref TableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TableName
      Layers:
        - !Ref CustomLambdaLayer

  CreateCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas
      Handler: create_category.lambda_handler
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: GeneralAuth
              AuthorizationScopes:
                - !Sub Admins-${Audience}
            Path: /categories
            Method: POST
            ApiId: !Ref HttpApi
      Environment:
        Variables:
          TABLE: !Ref TableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Layers:
        - !Ref CustomLambdaLayer

  CreatePostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas
      Handler: create_post.lambda_handler
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: GeneralAuth
              AuthorizationScopes:
                - !Sub Users-${Audience}
                - !Sub Admins-${Audience}
            Path: /posts
            Method: POST
            ApiId: !Ref HttpApi
      Environment:
        Variables:
          TABLE: !Ref TableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Layers:
        - !Ref CustomLambdaLayer
