AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: api.csclfg.com
Globals:
  Function:
    Timeout: 5
    Runtime: python3.9

Parameters:
  UserPoolId:
    Type: String
    Description: User pool id for Cognito provider
  Audience:
    Type: String
    Description: Client id for user pool
  Table:
    Type: String
    Default: csclfg-db

Resources:
  UtilsLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: src/lambda_layers/utils_layer
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9

  ModelsLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: src/lambda_layers/models_layer
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9

  LibLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: src/lambda_layers/lib_layer
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        Authorizers:
          GeneralAuth:
            AuthorizationScopes:
              - email
              - openid
              - profile
            IdentitySource: "$request.header.Authorization"
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPoolId}
              audience:
                - !Ref Audience

      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
        AllowOrigins:
          - http://localhost:8080

  GetPostsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas
      Handler: get_posts.lambda_handler
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            Path: /posts
            Method: GET
            ApiId: !Ref HttpApi
      Layers:
        - !Ref LibLambdaLayer
        - !Ref UtilsLambdaLayer

  GetCategoriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas
      Handler: get_categories.lambda_handler
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            Path: /categories
            Method: GET
            ApiId: !Ref HttpApi
      Environment:
        Variables:
          TABLE: !Ref Table
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref Table
      Layers:
        - !Ref LibLambdaLayer
        - !Ref UtilsLambdaLayer

  CreateCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas
      Handler: create_category.lambda_handler
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: GeneralAuth
              AuthorizationScopes:
                - !Sub Admins-${Audience}
            Path: /categories
            Method: POST
            ApiId: !Ref HttpApi
      Environment:
        Variables:
          TABLE: !Ref Table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
      Layers:
        - !Ref LibLambdaLayer
        - !Ref UtilsLambdaLayer
        - !Ref ModelsLambdaLayer

  CreatePostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas
      Handler: create_post.lambda_handler
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: GeneralAuth
              AuthorizationScopes:
                - !Sub Users-${Audience}
                - !Sub Admins-${Audience}
            Path: /posts
            Method: POST
            ApiId: !Ref HttpApi
      Environment:
        Variables:
          TABLE: !Ref Table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
      Layers:
        - !Ref LibLambdaLayer
        - !Ref UtilsLambdaLayer
        - !Ref ModelsLambdaLayer
